!function(e){var n=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){!function(e,n){if(!m[e]||!h[e])return;for(var t in h[e]=!1,n)Object.prototype.hasOwnProperty.call(n,t)&&(p[t]=n[t]);0==--T&&0===O&&P()}(e,t),n&&n(e,t)};var t,r=!0,o="5788545341add8b07e02",i=1e4,a={},s=[],c=[];function d(e){var n=N[e];if(!n)return S;var r=function(r){return n.hot.active?(N[r]?-1===N[r].parents.indexOf(e)&&N[r].parents.push(e):(s=[e],t=r),-1===n.children.indexOf(r)&&n.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),s=[]),S(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return S[e]},set:function(n){S[e]=n}}};for(var i in S)Object.prototype.hasOwnProperty.call(S,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===l&&_("prepare"),O++,S.e(e).then(n,function(e){throw n(),e});function n(){O--,"prepare"===l&&(g[e]||v(e),0===O&&0===T&&P())}},r.t=function(e,n){return 1&n&&(e=r(e)),S.t(e,-2&n)},r}var u=[],l="idle";function _(e){l=e;for(var n=0;n<u.length;n++)u[n].call(null,e)}var f,p,E,T=0,O=0,g={},h={},m={};function I(e){return+e+""===e?+e:e}function y(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return r=e,_("check"),function(e){return e=e||1e4,new Promise(function(n,t){if("undefined"==typeof XMLHttpRequest)return t(new Error("No browser support"));try{var r=new XMLHttpRequest,i=S.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=e,r.send(null)}catch(e){return t(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)t(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)n();else if(200!==r.status&&304!==r.status)t(new Error("Manifest request to "+i+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void t(e)}n(e)}}})}(i).then(function(e){if(!e)return _("idle"),null;h={},g={},m=e.c,E=e.h,_("prepare");var n=new Promise(function(e,n){f={resolve:e,reject:n}});p={};return v(0),"prepare"===l&&0===O&&0===T&&P(),n})}function v(e){m[e]?(h[e]=!0,T++,function(e){var n=document.getElementsByTagName("head")[0],t=document.createElement("script");t.charset="utf-8",t.src=S.p+""+e+"."+o+".hot-update.js",n.appendChild(t)}(e)):g[e]=!0}function P(){_("ready");var e=f;if(f=null,e)if(r)Promise.resolve().then(function(){return A(r)}).then(function(n){e.resolve(n)},function(n){e.reject(n)});else{var n=[];for(var t in p)Object.prototype.hasOwnProperty.call(p,t)&&n.push(I(t));e.resolve(n)}}function A(n){if("ready"!==l)throw new Error("apply() is only allowed in ready status");var t,r,i,c,d;function u(e){for(var n=[e],t={},r=n.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),i=o.id,a=o.chain;if((c=N[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var s=0;s<c.parents.length;s++){var d=c.parents[s],u=N[d];if(u){if(u.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([d]),moduleId:i,parentId:d};-1===n.indexOf(d)&&(u.hot._acceptedDependencies[i]?(t[d]||(t[d]=[]),f(t[d],[i])):(delete t[d],n.push(d),r.push({chain:a.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}function f(e,n){for(var t=0;t<n.length;t++){var r=n[t];-1===e.indexOf(r)&&e.push(r)}}n=n||{};var T={},O=[],g={},h=function(){console.warn("[HMR] unexpected require("+v.moduleId+") to disposed module")};for(var y in p)if(Object.prototype.hasOwnProperty.call(p,y)){var v;d=I(y);var P=!1,A=!1,j=!1,L="";switch((v=p[y]?u(d):{type:"disposed",moduleId:y}).chain&&(L="\nUpdate propagation: "+v.chain.join(" -> ")),v.type){case"self-declined":n.onDeclined&&n.onDeclined(v),n.ignoreDeclined||(P=new Error("Aborted because of self decline: "+v.moduleId+L));break;case"declined":n.onDeclined&&n.onDeclined(v),n.ignoreDeclined||(P=new Error("Aborted because of declined dependency: "+v.moduleId+" in "+v.parentId+L));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(v),n.ignoreUnaccepted||(P=new Error("Aborted because "+d+" is not accepted"+L));break;case"accepted":n.onAccepted&&n.onAccepted(v),A=!0;break;case"disposed":n.onDisposed&&n.onDisposed(v),j=!0;break;default:throw new Error("Unexception type "+v.type)}if(P)return _("abort"),Promise.reject(P);if(A)for(d in g[d]=p[d],f(O,v.outdatedModules),v.outdatedDependencies)Object.prototype.hasOwnProperty.call(v.outdatedDependencies,d)&&(T[d]||(T[d]=[]),f(T[d],v.outdatedDependencies[d]));j&&(f(O,[v.moduleId]),g[d]=h)}var b,x=[];for(r=0;r<O.length;r++)d=O[r],N[d]&&N[d].hot._selfAccepted&&x.push({module:d,errorHandler:N[d].hot._selfAccepted});_("dispose"),Object.keys(m).forEach(function(e){!1===m[e]&&function(e){delete installedChunks[e]}(e)});for(var w,M,R=O.slice();R.length>0;)if(d=R.pop(),c=N[d]){var D={},H=c.hot._disposeHandlers;for(i=0;i<H.length;i++)(t=H[i])(D);for(a[d]=D,c.hot.active=!1,delete N[d],delete T[d],i=0;i<c.children.length;i++){var C=N[c.children[i]];C&&((b=C.parents.indexOf(d))>=0&&C.parents.splice(b,1))}}for(d in T)if(Object.prototype.hasOwnProperty.call(T,d)&&(c=N[d]))for(M=T[d],i=0;i<M.length;i++)w=M[i],(b=c.children.indexOf(w))>=0&&c.children.splice(b,1);for(d in _("apply"),o=E,g)Object.prototype.hasOwnProperty.call(g,d)&&(e[d]=g[d]);var U=null;for(d in T)if(Object.prototype.hasOwnProperty.call(T,d)&&(c=N[d])){M=T[d];var Y=[];for(r=0;r<M.length;r++)if(w=M[r],t=c.hot._acceptedDependencies[w]){if(-1!==Y.indexOf(t))continue;Y.push(t)}for(r=0;r<Y.length;r++){t=Y[r];try{t(M)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:d,dependencyId:M[r],error:e}),n.ignoreErrored||U||(U=e)}}}for(r=0;r<x.length;r++){var F=x[r];d=F.module,s=[d];try{S(d)}catch(e){if("function"==typeof F.errorHandler)try{F.errorHandler(e)}catch(t){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:t,originalError:e}),n.ignoreErrored||U||(U=t),U||(U=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:d,error:e}),n.ignoreErrored||U||(U=e)}}return U?(_("fail"),Promise.reject(U)):(_("idle"),new Promise(function(e){e(O)}))}var N={};function S(n){if(N[n])return N[n].exports;var r=N[n]={i:n,l:!1,exports:{},hot:function(e){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:t!==e,active:!0,accept:function(e,t){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)n._acceptedDependencies[e[r]]=t||function(){};else n._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._declinedDependencies[e[t]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=n._disposeHandlers.indexOf(e);t>=0&&n._disposeHandlers.splice(t,1)},check:y,apply:A,status:function(e){if(!e)return l;u.push(e)},addStatusHandler:function(e){u.push(e)},removeStatusHandler:function(e){var n=u.indexOf(e);n>=0&&u.splice(n,1)},data:a[e]};return t=void 0,n}(n),parents:(c=s,s=[],c),children:[]};return e[n].call(r.exports,r,r.exports,d(n)),r.l=!0,r.exports}S.m=e,S.c=N,S.d=function(e,n,t){S.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},S.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},S.t=function(e,n){if(1&n&&(e=S(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(S.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)S.d(t,r,function(n){return e[n]}.bind(null,r));return t},S.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return S.d(n,"a",n),n},S.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},S.p="",S.h=function(){return o},d("./src/index.js")(S.s="./src/index.js")}({"./src/core.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r="",o=new Object,i=function(){return r},a=function(e){var n=s();return o[n]=e,n},s=function(e,n){return function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(e,n).toUpperCase()}}(/[xy]/g,function(e){var n=16*Math.random()|0;return("x"==e?n:3&n|8).toString(16)});n.default={setPlatform:function(e){r=e},getPlatform:i,sendMessage:function(e,n,t){var r=JSON.stringify({type:e,params:n,sync:t});return"android"===i()?window.__js_android__.message(r):"ios"===i()?window.prompt(r):void 0},saveCallback:a,loadCallback:function(e){var n=Array.prototype.slice.call(arguments);return n.splice(0,1),o[e].apply(window,n)},distoryCallback:function(e){delete o[e]},createUUID:s,handleConfig:function(e){for(var n in e)"function"==typeof e[n]&&(e[n]=a(e[n]));return e}}},"./src/image/album.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default={openAlbum:function(e){var n=__handle_config(e);__send_message(__TYPE.IMAGE.ALBUM.OPEN,n)}}},"./src/image/camera.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default={openCamera:function(e){var n=__handle_config(e);__send_message(__TYPE.IMAGE.CAMERA.OPEN,n)}}},"./src/image/index.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=i(t("./src/image/camera.js")),o=i(t("./src/image/album.js"));function i(e){return e&&e.__esModule?e:{default:e}}n.default={camera:r.default,album:o.default}},"./src/index.js":function(e,n,t){"use strict";var r=u(t("./src/image/index.js")),o=u(t("./src/core.js")),i=u(t("./src/type.js")),a=u(t("./src/ui/index.js")),s=u(t("./src/net/index.js")),c=u(t("./src/io/index.js")),d=u(t("./src/map/index.js"));function u(e){return e&&e.__esModule?e:{default:e}}window.$__set_platform__=o.default.setPlatform,window.__send_message=o.default.sendMessage,window.__TYPE=i.default,window.__handle_config=o.default.handleConfig,window.__load_callback=o.default.loadCallback,window.__distory_callback=o.default.distoryCallback,window.$__get_platform__=o.default.getPlatform,window.$lemix={image:r.default,ui:a.default,net:s.default,io:c.default,map:d.default}},"./src/io/file.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default={deleteLongTermFile:function(e){__send_message(__TYPE.IO.FILE.DELETE_LONG_TERM_FILE,{fileKey:e})},deleteShortTermFile:function(e){__send_message(__TYPE.IO.FILE.DELETE_SHORT_TERM_FILE,{fileKey:e})},clearAllLongTermFiles:function(){__send_message(__TYPE.IO.FILE.CLEAR_ALL_LONG_TERM_FILES,{})},clearAllShortTermFiles:function(){__send_message(__TYPE.IO.FILE.CLEAR_ALL_SHORT_TERM_FILES,{})}}},"./src/io/index.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(t("./src/io/file.js"));n.default={file:r.default}},"./src/map/index.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(t("./src/map/location.js"));n.default={location:r.default}},"./src/map/location.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default={getLocation:function(e){var n=__handle_config(e);__send_message(__TYPE.MAP.LOCATION.GET_POSITION,n)},onInstantLocation:function(e){var n=__handle_config(e);__send_message(__TYPE.MAP.LOCATION.ON_INSTANT_POSITION,n)},offInstantLocation:function(e){var n=__handle_config(e);__send_message(__TYPE.MAP.LOCATION.OFF_INSTANT_POSITION,n)}}},"./src/net/http.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default={syncRequest:function(e){return __send_message(__TYPE.NET.HTTP.SYNC_REQUEST,e,!0)},asyncRequest:function(e){var n=__handle_config(e);__send_message(__TYPE.NET.HTTP.ASYNC_REQUEST,n)},uploadFile:function(e){var n=__handle_config(e);__send_message(__TYPE.NET.HTTP.UPLOAD_FILE,n)},downloadFile:function(e){var n=__handle_config(e);__send_message(__TYPE.NET.HTTP.DOWNLOAD_FILE,n)}}},"./src/net/index.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(t("./src/net/http.js"));n.default={http:r.default}},"./src/type.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={IMAGE:{CAMERA:{OPEN:"image.camera.open"},ALBUM:{OPEN:"image.album.open"}},UI:{NAVIGATION:{PUSH:"ui.navigation.push",POP:"ui.navigation.pop",CLOSE:"ui.navigation.close",PRESENT:"ui.navigation.present"},STYLE:{SET_NAVIGATION_BAR_HIDDEN:"ui.style.setNavigationBarHidden",SET_NAVIGATION_BACKGROUND_COLOR:"ui.style.setNavigationBackgroundColor",SET_NAVIGATION_TITLE:"ui.style.setNavigationTitle",SET_STATUS_BAR_HIDDEN:"ui.style.setStatusBarHidden",SET_NAVIGATION_ITEM_COLOR:"ui.style.setNavigationItemColor",SET_STATUS_BAR_STYLE:"ui.style.setStatusBarStyle"},SCREEN:{GET_WIDTH:"ui.screen.getWidth",GET_HEIGHT:"ui.screen.getHeight",ROTATE:"ui.screen.rotate"}},NET:{HTTP:{SYNC_REQUEST:"net.http.syncRequest",ASYNC_REQUEST:"net.http.asyncRequest",UPLOAD_FILE:"net.http.uploadFile",DOWNLOAD_FILE:"net.http.downloadFile"}},IO:{FILE:{DELETE_LONG_TERM_FILE:"io.file.deleteLongTermFile",DELETE_SHORT_TERM_FILE:"io.file.deleteShortTermFile",CLEAR_ALL_LONG_TERM_FILES:"io.file.clearAllLongTermFiles",CLEAR_ALL_SHORT_TERM_FILES:"io.file.clearAllShortTermFiles"}},MAP:{LOCATION:{GET_POSITION:"map.location.getPosition",ON_INSTANT_POSITION:"map.location.onInstantPosition",OFF_INSTANT_POSITION:"map.location.offInstantPosition"}}}},"./src/ui/index.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=a(t("./src/ui/navigation.js")),o=a(t("./src/ui/style.js")),i=a(t("./src/ui/screen.js"));function a(e){return e&&e.__esModule?e:{default:e}}n.default={navigation:r.default,style:o.default,screen:i.default}},"./src/ui/navigation.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default={push:function(e,n,t){__send_message(__TYPE.UI.NAVIGATION.PUSH,{aim:n,type:e,config:t})},pop:function(e){__send_message(__TYPE.UI.NAVIGATION.POP,{layer:e})},close:function(e){__send_message(__TYPE.UI.NAVIGATION.CLOSE,{layer:e})},present:function(e,n,t){__send_message(__TYPE.UI.NAVIGATION.PRESENT,{type:e,aim:n,config:t})}}},"./src/ui/screen.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default={getWidth:function(){__send_message(__TYPE.UI.SCREEN.GET_WIDTH,{})},getHeight:function(){__send_message(__TYPE.UI.SCREEN.GET_HEIGHT,{})},rotate:function(e){__send_message(__TYPE.UI.SCREEN.ROTATE,e)}}},"./src/ui/style.js":function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default={setNavigationBarHidden:function(e){__send_message(__TYPE.UI.STYLE.SET_NAVIGATION_BAR_HIDDEN,{isHidden:e})},setNavigationBackgroundColor:function(e){__send_message(__TYPE.UI.STYLE.SET_NAVIGATION_BACKGROUND_COLOR,{color:e})},setNavigationTitle:function(e){__send_message(__TYPE.UI.STYLE.SET_NAVIGATION_TITLE,{title:e})},setStatusBarHidden:function(e){__send_message(__TYPE.UI.STYLE.SET_STATUS_BAR_HIDDEN,{isHidden:e})},setNavigationItemColor:function(e){__send_message(__TYPE.UI.STYLE.SET_NAVIGATION_ITEM_COLOR,{color:e})},setStatusBarStyle:function(e){__send_message(__TYPE.UI.STYLE.SET_STATUS_BAR_STYLE,{style:e})}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,